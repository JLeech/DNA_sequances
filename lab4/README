
Получившаяся матрица - скомпонованный вариант
[0,   -10, -20, -30,  -40, -50, -60, -70]
[-10,  -2, 	-4,  -7,    3,   3,   1,   1]
[-20,  -3, 	-3,  -6,    3,   9,   8,  14]
[-30,  -4, 	 2,  -1,    1,   8,  14,  13]
[-40,  -6, 	 2,  -1,   -1,   5,  14,  11]
[-50,  -7, 	 7,   4,    2,   4,  19,  18]
[-60,  -11,	 4,  22,   19,  16,  16,  16]
[-70,  -13,	 4,  19,   20,  17,  17,  14]
[-80,  -15,	 2,  16,   30,  30,  28,  28]
[-90,  -16,	 1,  13,   30,  36,  35,  41]
[-100, -17,	 0,  10,   30,  42,  41,  47]

0 : 0
1 : 4
2 : 5
3 : 6
4 : 6
5 : 6
6 : 6
7 : 6
8 : 6
9 : 7
10 : 7


тут видно, как она считает строки отдельно, и считает каждый раз на подстроке 
уменьшенной длины.
выведены максимальные элементы для каждой строки.

lf: [-50, -7, 7, 4, 2, 4, 19, 18]
max: 19
lf: [-20, -3, -3, -6, 3, 9, 8]
max: 9
lf: [-10, -2, -4, -7, 3, 3]
max: 3
lf: [0, -10, -20, -30, -40]
max: 0
lf: [-30, -4, 2, -1, 1, 8, 14]
max: 14
lf: [-40, -6, 2, -1, -1, 5, 14]
max: 14
lf: [-70, -13, 4, 19, 20, 17, 17, 14]
max: 17
lf: [-60, -11, 4, 22, 19, 16, 16]
max: 16
lf: [-80, -15, 2, 16, 30, 30, 28, 28]
max: 28
lf: [-90, -16, 1, 13, 30, 36, 35, 41]
max: 41
lf: [-100, -17, 0, 10, 30, 42, 41, 47]
max: 4

далее, по полученной последовательности(а точнее хешу) result, строится результат выравнивания.
алгоритм как в обратном пути.

Это всё можно проверить просто введя ruby lab4.rb в консоли